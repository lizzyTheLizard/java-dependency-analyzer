name: Deploy
run-name: "Create Release ${{ inputs.version }}"
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version to deploy
        required: true
jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock
      - name: Install Frontend Dependencies
        working-directory: frontend
        run: yarn install
      - name: Build Frontend
        working-directory: frontend
        run: yarn build
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Set Version
        working-directory: dependency-analyzer
        run: ./mvnw versions:set -DnewVersion=${{ inputs.version }} -DgenerateBackupPoms=false
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          # Install gpg secret key
          cat <(echo -e "${{ secrets.GPG_SIGNING_KEY }}") | gpg --batch --import
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG
      - name: Build Plugin
        working-directory: dependency-analyzer
        run: ./mvnw --batch-mode deploy -P build-release-documentation
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      - name: Commit updated version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Release ${{ inputs.version }}"
          git push
      - name: Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ inputs.version }}
          fail_on_unmatched_files: true
          files: dependency-analyzer/target/dependency-analyzer-${{ inputs.version }}*
      - name: Set Version back to SNAPSHOT
        working-directory: dependency-analyzer
        run: ./mvnw versions:set -DnewVersion=${{ inputs.version }}-SNAPSHOT -DgenerateBackupPoms=false
      - name: Commit updated version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Set back to snapshot ${{ inputs.version }}"
          git push

